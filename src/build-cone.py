#!/usr/bin/env python
#!/usr/bin/env python



import re, os, random, pickle, time
from  collections import namedtuple, defaultdict
from sets import Set, ImmutableSet
import networkx as nx
import numpy, math
import copy
import logging
import multiprocessing
from multiprocessing import Lock, Process, Queue, current_process, Pool
#logger = logging.getLogger(__name__)


def parse_CADIA():
    # parsing customer cones and p2p and p2c relationships

    # we parse the customer cones from caida website

    # Here we extract peer to peer relationships and provider to customers
    # Note that p2p == 1, p2c == -1, and none == 0
    fil = open(os.path.join('20160101.as-rel.txt'), 'r')
    rd = fil.read()
    p = re.compile(r"^(?P<provider>[0-9]+)\|(?P<customers>[0-9]+)\|(?P<link>[-1,0]+)\n", re.MULTILINE)
    links = {}
    myiterator = p.finditer(rd)
    all_ases = Set([])
    for match in myiterator:
        prvdrs = match.group('provider')
        ctmrs = match.group('customers')
        link = match.group('link')
        all_ases |= Set([prvdrs])
        all_ases |= Set([ctmrs])
        if link == '-1': links[(prvdrs, ctmrs)] = -1
        #if link == '0': links[(prvdrs, ctmrs)] = 0
    #providers, customers = self.build_my_graph(links)
    return links



def parse_QIU():
    ##############################################################
    ##############################################################
    #################Parse the AS relationships###################
    ##############################################################
    ##############################################################
    fil = open('/home/moh/mohsen/projects/guard-sets/as-graph/requirements/oix_relation_degree', 'r')  # 'oix_relation_degree'
    rd = fil.read()
    p = re.compile(
        r"AS(?P<asn>\d*):?\nProviders:#[0-9]*::(?P<providers>.*)\nCustomers:#[0-9]*::(?P<customers>.*)\nPeers:#[0-9]*::(?P<peers>.*)\nSiblings:#[0-9]*::(?P<siblings>.*)\n")
    myiterator = p.finditer(rd)
    asns = {}
    as_p = {}
    as_c = {}
    mysiblings = defaultdict(Set)
    for match in myiterator:
        asn_ = match.group('asn')
        if asn_ == '':
            print 'asn_'
            exit()
        if asn_ is None: print "AS number is None! why?"
        prvdrs = Set(re.split(r'\D', match.group('providers')))
        ctmrs = Set(re.split(r'\D', match.group('customers')))
        prs = Set(re.split(r'\D', match.group('peers')))
        sblngs = Set(re.split(r'\D', match.group('siblings')))
        if '' in prvdrs: prvdrs.remove('')
        if '' in ctmrs: ctmrs.remove('')
        if '' in prs: prs.remove('')
        if '' in sblngs: sblngs.remove('')
        for i in prvdrs:
            if i == '': 
                print 'empty provider'
                exit()
            as_p[(i,asn_)] = -1
        for i in ctmrs:
            if i == '': 
                print 'empty customer'
                exit()
            as_c[(asn_,i)] = -1
        mysiblings[asn_] = sblngs
        #asns[asn_] = as_info(asn=asn_, providers=prvdrs, customers=ctmrs, peers=prs, siblings=sblngs)
    return as_p,as_c, mysiblings


def build_my_graph( links,mysiblings):
    ##############################################################
    ##############################################################
    #################Building the Directed Graph##################
    ##############################################################
    ##############################################################
    G = nx.DiGraph()  # it's our graph object
    # nodes = asns.keys()
    # nodes = [int(i) for i in nodes]
    # G.add_nodes_from(nodes)
    for key in links:
        if links[key] != -1: continue
        provider, customer = key[0], key[1]
        if provider == customer: continue
        G.add_edge(provider, customer)
    ases = {'30058': 61440.0, '39792': 360.0, '8422': 28000.0, '3927': 9560.0, '15600': 12400.0, '56322': 44000.0, '59729': 7380.0, '40156': 8410.0, '2840': 4250.0, '3320': 8480.0, '39651': 27030.0, '16276': 2093646.0, '54290': 54110.0, '35425': 26140.0, '6724': 139260.0, '8251': 8070.0, '15765': 8050.0, '26827': 1970.0, '49981': 1220.0, '20773': 62497.0, '62639': 2080.0, '51852': 9330.0, '3595': 15470.0, '14987': 20170.0, '54858': 9540.0, '29695': 46080.0, '55053': 10250.0, '17090': 9400.0, '4385': 17200.0, '197019': 82020.0, '6327': 1260.0, '196866': 44800.0, '35017': 4240.0, '2847': 14400.0, '12271': 1940.0, '43970': 13600.0, '62638': 9540.0, '43557': 22800.0, '8473': 42850.0, '5381': 9550.0, '20454': 1740.0, '1312': 10500.0, '28908': 1520.0, '9371': 2050.0, '2607': 20.0, '202194': 20.0, '33885': 38200.0, '29854': 8720.0, '1955': 14400.0, '5518': 3100.0, '17019': 4140.0, '30266': 2120.0, '6718': 17730.0, '264': 5860.0, '12824': 4290.0, '36351': 36600.0, '36352': 29400.0, '42455': 4590.0, '23028': 114750.0, '14061': 12020.0, '31661': 8310.0, '50673': 9760.0, '17': 1860.0, '12668': 5240.0, '51167': 140500.0, '25189': 9310.0, '5615': 22200.0, '3323': 8740.0, '200130': 37840.0, '15598': 2590.0, '8972': 301594.0, '9009': 24130.0, '19108': 1810.0, '36114': 1690.0, '9119': 28400.0, '51290': 86000.0, '21844': 3760.0, '15626': 96540.0, '36850': 5530.0, '32097': 15570.0, '701': 59220.0, '50266': 143000.0, '15435': 1110.0, '2828': 12408.0, '14618': 20110.0, '202109': 164430.0, '48172': 4860.0, '9143': 10870.0, '12586': 44200.0, '3301': 23500.0, '18978': 2050.0, '20473': 18700.0, '174': 6520.0, '196689': 27060.0, '8881': 2710.0, '15756': 6460.0, '47447': 10100.0, '1257': 30080.0, '3': 22950.0, '20857': 15610.0, '25596': 10800.0, '60117': 2930.0, '29670': 2550.0, '31103': 37220.0, '1653': 322660.0, '35598': 2370.0, '8758': 6010.0, '2603': 77300.0, '16125': 3390.0, '31122': 20200.0, '1101': 78600.0, '54540': 2680.0, '8201': 15000.0, '17139': 3590.0, '27589': 2650.0, '12306': 4500.0, '3265': 58520.0, '8283': 4340.0, '40440': 3740.0, '7029': 3960.0, '197424': 5520.0, '2516': 6023.0, '196750': 9200.0, '9008': 3330.0, '786': 30500.0, '60118': 11400.0, '30962': 1590.0, '5577': 99970.0, '32': 13580.0, '8075': 5380.0, '30': 11060.0, '6428': 12280.0, '5408': 56520.0, '12322': 38210.0, '24607': 5620.0, '3356': 2070.0, '33891': 11870.0, '42730': 153130.0, '26046': 6990.0, '13030': 19720.0, '50618': 2980.0, '41733': 5200.0, '26347': 17120.0, '198310': 24700.0, '12876': 2647790.0, '6830': 14500.0, '34555': 5290.0, '39857': 4260.0, '12871': 15580.0, '48031': 22700.0, '197922': 17050.0, '13768': 2480.0, '18450': 8990.0, '29314': 2890.0, '15557': 32590.0, '3842': 13590.0, '43561': 2040.0, '7018': 4330.0, '31863': 8460.0, '18712': 3180.0, '8111': 1960.0, '46816': 2400.0, '3292': 1460.0, '60781': 268530.0, '3215': 15500.0, '6939': 157390.0, '14536': 2510.0, '42239': 23700.0, '62904': 2840.0, '46652': 65330.0, '2119': 19340.0, '39020': 2580.0, '58302': 28400.0, '44869': 10000.0, '194': 3380.0, '51731': 10320.0, '6871': 936.0, '49562': 7010.0, '393406': 103350.0, '7922': 6200.0, '8100': 4280.0, '53340': 6380.0, '35041': 6220.0, '35366': 100060.0, '34171': 12670.0, '46887': 19320.0, '20860': 98540.0, '7506': 30260.0, '6461': 4240.0, '20001': 1820.0, '18866': 1820.0, '224': 8200.0, '202018': 72470.0, '5650': 2520.0, '49544': 31940.0, '13213': 29119.0, '25795': 1750.0, '51034': 704.0, '73': 5210.0, '47629': 594.0, '8522': 3960.0, '6893': 30880.0, '60033': 15700.0, '30693': 10430.0, '2108': 2290.0, '1102': 8100.0, '1103': 121360.0, '24812': 3590.0, '6775': 2130.0, '2514': 29100.0, '49367': 79700.0, '10929': 2260.0, '46664': 1620.0, '15467': 28500.0, '39138': 2880.0, '32748': 356.0, '35376': 2880.0, '20021': 642.0, '32458': 2620.0, '12714': 7080.0, '16509': 5180.0, '34274': 4770.0, '30633': 24260.0, '12715': 21500.0, '46844': 4510.0, '20712': 2870.0, '553': 1130.0, '15782': 2430.0, '43317': 17230.0, '28685': 15200.0, '4766': 3440.0, '14361': 3370.0, '62567': 60340.0, '8402': 32010.0, '33387': 40960.0, '5645': 1910.0, '24961': 705230.0, '19975': 1980.0, '42682': 12650.0, '24872': 19500.0, '8560': 82590.0, '8437': 82140.0, '42549': 13700.0, '17746': 1170.0, '47869': 51650.0, '48971': 8310.0, '15830': 100930.0, '50304': 12900.0, '31148': 5860.0, '51815': 2690.0, '25926': 21950.0, '1759': 1600.0, '54489': 5830.0, '4589': 2580.0, '57169': 6820.0, '30083': 14390.0, '14866': 1800.0, '43541': 2740.0, '25454': 3390.0, '198203': 3250.0, '24875': 106600.0, '31400': 13700.0, '4319': 5420.0, '34011': 205120.0, '22989': 4950.0, '197540': 110640.0, '5603': 392.0, '16591': 1910.0, '8551': 2090.0, '37560': 16600.0, '24940': 1593600.0, '11557': 2740.0, '34702': 5150.0, '14907': 22400.0, '11403': 15000.0, '62317': 28100.0, '2856': 2900.0, '12605': 2630.0, '35094': 13800.0, '9044': 28910.0, '1280': 6960.0, '22132': 3610.0, '13703': 3040.0, '8001': 55670.0, '51013': 2920.0, '11051': 3810.0, '3223': 79960.0, '31034': 52000.0, '42610': 14370.0, '8767': 2430.0, '16265': 158650.0, '15895': 4480.0, '25767': 5200.0, '39608': 14120.0, '50113': 1110.0, '29802': 4380.0, '680': 147040.0, '1764': 40500.0}
    # build customer cone
    print 'Graph is strongly connected: ', nx.is_weakly_connected(G)
    print 'Number of weakly connected parts', [len(c) for c in sorted(nx.weakly_connected_components(G), key=len, reverse=True)]
    short_comp = [c for c in sorted(nx.weakly_connected_components(G), key=len, reverse=True) if len(c) < 100]
    short_comp = [j for i in short_comp for j in i]
    tmp = 0
    for i in short_comp:
        if i in ases:
            tmp += ases[i]
    print 'bw: ',tmp
    successors_ = defaultdict(Set)
    for node in G:
        if node == '': 
            print 'empty node'
            exit()  
        if len(G.degree([node])) == 0:
            print 'zero degree for node: ', node
            exit()
        T = G.successors(node)
        successors_[node] = Set(T)
    #print "missing ASes: {0}".format(Set(mysiblings.keys()) - all_nodes)

    tmp_cone = defaultdict(Set)
    print "Building Customer Conem, total number of ASes: ", len(successors_) 
    cnt = 1
    for node in successors_:
        print 'Node: {0}\r'.format(cnt),
        cnt += 1
        tmp_successors = Set([])
        loop_container = []
        loop_container += [node]
        tested = Set([])
        while (len(loop_container) != 0):
            current_succ = loop_container.pop(0)
            if current_succ in tested: continue
            #print 'loop: ', loop_container

            tmp_successors |= successors_[current_succ]
            tmp_successors |= Set([current_succ])
            if current_succ in successors_[current_succ]: successors_[current_succ] = successors_[
                                                                                          current_succ] - Set(
                [current_succ])
            loop_container += list(successors_[current_succ])
            tested |= Set([current_succ])
            #loop_container = loop_container - tested
            #if len(loop_container) % 5000 == 0 and len(loop_container) != 0: print len(loop_container)
        #print node,':\t cone size\t',  len(tmp_successors)
        tmp_cone[node] = copy.copy(tmp_successors)

    print "Customer Cone built!"

    # check customer cone
    print "Checking the customer cone"
    for pro in tmp_cone:
        current_cust = tmp_cone[pro]
        assert (len(current_cust) >= 1), 'length less than 1 for AS{0}'.format(pro)
        for cust in current_cust:
            assert (len(current_cust & tmp_cone[cust]) == len(tmp_cone[cust])), 'Custmore Cone is not right'
    print "Successfully checked"
    
    all_ases = Set(tmp_cone.keys())

    '''
    providers = defaultdict(Set)
    for node in G:
        T = nx.dfs_successors(G,node)
        succ = Set([])
        succ |= Set([node])
        for t in T:
            succ |= Set([t])
            succ |= Set(T[t])
        providers[node] = succ.copy()
    '''
    G = nx.DiGraph()  # it's our graph object
    # nodes = asns.keys()
    # nodes = [int(i) for i in nodes]
    # G.add_nodes_from(nodes)
    for key in links:
        if links[key] == 0: continue
        provider, customer = key[0], key[1]
        if provider == customer: continue
        G.add_edge(customer, provider)
    customers = defaultdict(Set)
    for node in G:
        T = nx.dfs_successors(G, node)
        succ = Set([])
        succ |= Set([node])
        for t in T:
            succ |= Set([t])
            succ |= Set(T[t])
        customers[node] = succ.copy()
    return tmp_cone, customers, all_ases



if __name__ == "__main__":





    as_p,as_c,mysiblings = parse_QIU()
    #test_links = parse_CADIA()
    cones, providers,all_ases = build_my_graph(as_p,mysiblings)


    file_ = open("../requirements/qiu-providers", 'w')
    pickle.dump(cones,file_)
    file_.close()
    

    file_ = open("../requirements/qiu-customers", 'w')
    pickle.dump(providers,file_)
    file_.close()
    
    file_ = open("../requirements/qiu-all_ases", 'w')
    pickle.dump(all_ases,file_)
    file_.close()
    
    print len(cones),len(providers),len(all_ases)
    exit()
    test = 0
    all_ = Set([])
    for i in as_p:
        if i in test_links:
            test += 1
            all_ |= Set([i[0]])
            all_ |= Set([i[1]])

    print "data from providers commons:{0}, ASes:{1}".format(test,len(all_))

    test = 0
    all_ = Set([])
    for i in as_c:
        if i in test_links:
            test += 1
            all_ |= Set([i[0]])
            all_ |= Set([i[1]])

    print "data from customers commons:{0}, ASes:{1}".format(test,len(all_))
    
    all_ = Set([])
    for i in as_p:
        all_ |= Set([i[0]])
        all_ |= Set([i[1]])
    print "data from providers ASes:{0}".format(len(all_))

    all_ = Set([])
    for i in test_links:
        all_ |= Set([i[0]])
        all_ |= Set([i[1]])
    print "data from customers ASes:{0}".format(len(all_))
    
    print "Common in QUi {0}".format(len(Set(as_c.keys()) & Set(as_p.keys())))
    
    #------------------------------------------------------
    #Build cone recursive call
    #missings = Set(['17571', '18644', '10061', '23755', '15606', '54217', '59649', '199466', '52890', '10452', '37691', '9779', '4789', '54354', '59009', '59008', '131211', '15046', '327785', '262291', '17847', '25076', '4671', '53074', '56156', '33740', '47092', '44038', '59728', '36806', '131285', '197976', '42293', '55060', '9068', '21674', '45590', '45057', '59010', '393960', '17713', '31991', '51107', '69', '6919', '14468', '60596', '2491', '23962', '57727', '9573', '2146', '25', '32437', '31749', '262835', '40412', '37962', '42597', '41641', '327835', '40206', '23466', '21358', '27939', '45046', '48779', '60967', '132079', '55830', '37981', '6701', '24575', '131403', '55608', '38370', '28237', '38374', '23876', '33013', '27666', '59762', '2939', '11349', '15582', '327804', '24475', '55986', '33646', '10927', '1650', '46007', '199056', '58812', '393689', '18189', '55588', '9258', '56988', '60230', '779', '58904', '45371', '56292', '24133', '42980', '18344', '38709', '17879', '262158', '57664', '17974', '3503', '43758', '10983', '327698', '19968', '37121', '28156', '54316', '393432', '41059', '2736', '9033', '23912', '131427', '55799', '24087', '257', '60409', '23796', '53913', '30461', '131151', '9401', '45369', '11423', '2680', '17440', '393540', '560', '21135', '57541', '9869', '60652', '45387', '2089', '32103', '24348', '9864', '5105', '4839', '58188', '45547', '37016', '19226', '32361', '43140', '50523', '45069', '10495', '43923', '60869', '60540', '18869', '44337', '196761', '17610', '11511', '52164', '60380', '60381', '6746', '132031', '3425', '327726', '6898', '56586', '50309', '56970', '56971', '10086', '24196', '4005', '22394', '32756', '3480', '51152', '4840', '4843', '32042', '895', '47051', '27891', '38341', '20476', '36751', '58520', '38587', '36270', '5838', '59035', '28612', '52216', '9690'])
    #ases = {'30058': 61440.0, '39792': 360.0, '8422': 28000.0, '3927': 9560.0, '15600': 12400.0, '56322': 44000.0, '59729': 7380.0, '40156': 8410.0, '2840': 4250.0, '3320': 8480.0, '39651': 27030.0, '16276': 2093646.0, '54290': 54110.0, '35425': 26140.0, '6724': 139260.0, '8251': 8070.0, '15765': 8050.0, '26827': 1970.0, '49981': 1220.0, '20773': 62497.0, '62639': 2080.0, '51852': 9330.0, '3595': 15470.0, '14987': 20170.0, '54858': 9540.0, '29695': 46080.0, '55053': 10250.0, '17090': 9400.0, '4385': 17200.0, '197019': 82020.0, '6327': 1260.0, '196866': 44800.0, '35017': 4240.0, '2847': 14400.0, '12271': 1940.0, '43970': 13600.0, '62638': 9540.0, '43557': 22800.0, '8473': 42850.0, '5381': 9550.0, '20454': 1740.0, '1312': 10500.0, '28908': 1520.0, '9371': 2050.0, '2607': 20.0, '202194': 20.0, '33885': 38200.0, '29854': 8720.0, '1955': 14400.0, '5518': 3100.0, '17019': 4140.0, '30266': 2120.0, '6718': 17730.0, '264': 5860.0, '12824': 4290.0, '36351': 36600.0, '36352': 29400.0, '42455': 4590.0, '23028': 114750.0, '14061': 12020.0, '31661': 8310.0, '50673': 9760.0, '17': 1860.0, '12668': 5240.0, '51167': 140500.0, '25189': 9310.0, '5615': 22200.0, '3323': 8740.0, '200130': 37840.0, '15598': 2590.0, '8972': 301594.0, '9009': 24130.0, '19108': 1810.0, '36114': 1690.0, '9119': 28400.0, '51290': 86000.0, '21844': 3760.0, '15626': 96540.0, '36850': 5530.0, '32097': 15570.0, '701': 59220.0, '50266': 143000.0, '15435': 1110.0, '2828': 12408.0, '14618': 20110.0, '202109': 164430.0, '48172': 4860.0, '9143': 10870.0, '12586': 44200.0, '3301': 23500.0, '18978': 2050.0, '20473': 18700.0, '174': 6520.0, '196689': 27060.0, '8881': 2710.0, '15756': 6460.0, '47447': 10100.0, '1257': 30080.0, '3': 22950.0, '20857': 15610.0, '25596': 10800.0, '60117': 2930.0, '29670': 2550.0, '31103': 37220.0, '1653': 322660.0, '35598': 2370.0, '8758': 6010.0, '2603': 77300.0, '16125': 3390.0, '31122': 20200.0, '1101': 78600.0, '54540': 2680.0, '8201': 15000.0, '17139': 3590.0, '27589': 2650.0, '12306': 4500.0, '3265': 58520.0, '8283': 4340.0, '40440': 3740.0, '7029': 3960.0, '197424': 5520.0, '2516': 6023.0, '196750': 9200.0, '9008': 3330.0, '786': 30500.0, '60118': 11400.0, '30962': 1590.0, '5577': 99970.0, '32': 13580.0, '8075': 5380.0, '30': 11060.0, '6428': 12280.0, '5408': 56520.0, '12322': 38210.0, '24607': 5620.0, '3356': 2070.0, '33891': 11870.0, '42730': 153130.0, '26046': 6990.0, '13030': 19720.0, '50618': 2980.0, '41733': 5200.0, '26347': 17120.0, '198310': 24700.0, '12876': 2647790.0, '6830': 14500.0, '34555': 5290.0, '39857': 4260.0, '12871': 15580.0, '48031': 22700.0, '197922': 17050.0, '13768': 2480.0, '18450': 8990.0, '29314': 2890.0, '15557': 32590.0, '3842': 13590.0, '43561': 2040.0, '7018': 4330.0, '31863': 8460.0, '18712': 3180.0, '8111': 1960.0, '46816': 2400.0, '3292': 1460.0, '60781': 268530.0, '3215': 15500.0, '6939': 157390.0, '14536': 2510.0, '42239': 23700.0, '62904': 2840.0, '46652': 65330.0, '2119': 19340.0, '39020': 2580.0, '58302': 28400.0, '44869': 10000.0, '194': 3380.0, '51731': 10320.0, '6871': 936.0, '49562': 7010.0, '393406': 103350.0, '7922': 6200.0, '8100': 4280.0, '53340': 6380.0, '35041': 6220.0, '35366': 100060.0, '34171': 12670.0, '46887': 19320.0, '20860': 98540.0, '7506': 30260.0, '6461': 4240.0, '20001': 1820.0, '18866': 1820.0, '224': 8200.0, '202018': 72470.0, '5650': 2520.0, '49544': 31940.0, '13213': 29119.0, '25795': 1750.0, '51034': 704.0, '73': 5210.0, '47629': 594.0, '8522': 3960.0, '6893': 30880.0, '60033': 15700.0, '30693': 10430.0, '2108': 2290.0, '1102': 8100.0, '1103': 121360.0, '24812': 3590.0, '6775': 2130.0, '2514': 29100.0, '49367': 79700.0, '10929': 2260.0, '46664': 1620.0, '15467': 28500.0, '39138': 2880.0, '32748': 356.0, '35376': 2880.0, '20021': 642.0, '32458': 2620.0, '12714': 7080.0, '16509': 5180.0, '34274': 4770.0, '30633': 24260.0, '12715': 21500.0, '46844': 4510.0, '20712': 2870.0, '553': 1130.0, '15782': 2430.0, '43317': 17230.0, '28685': 15200.0, '4766': 3440.0, '14361': 3370.0, '62567': 60340.0, '8402': 32010.0, '33387': 40960.0, '5645': 1910.0, '24961': 705230.0, '19975': 1980.0, '42682': 12650.0, '24872': 19500.0, '8560': 82590.0, '8437': 82140.0, '42549': 13700.0, '17746': 1170.0, '47869': 51650.0, '48971': 8310.0, '15830': 100930.0, '50304': 12900.0, '31148': 5860.0, '51815': 2690.0, '25926': 21950.0, '1759': 1600.0, '54489': 5830.0, '4589': 2580.0, '57169': 6820.0, '30083': 14390.0, '14866': 1800.0, '43541': 2740.0, '25454': 3390.0, '198203': 3250.0, '24875': 106600.0, '31400': 13700.0, '4319': 5420.0, '34011': 205120.0, '22989': 4950.0, '197540': 110640.0, '5603': 392.0, '16591': 1910.0, '8551': 2090.0, '37560': 16600.0, '24940': 1593600.0, '11557': 2740.0, '34702': 5150.0, '14907': 22400.0, '11403': 15000.0, '62317': 28100.0, '2856': 2900.0, '12605': 2630.0, '35094': 13800.0, '9044': 28910.0, '1280': 6960.0, '22132': 3610.0, '13703': 3040.0, '8001': 55670.0, '51013': 2920.0, '11051': 3810.0, '3223': 79960.0, '31034': 52000.0, '42610': 14370.0, '8767': 2430.0, '16265': 158650.0, '15895': 4480.0, '25767': 5200.0, '39608': 14120.0, '50113': 1110.0, '29802': 4380.0, '680': 147040.0, '1764': 40500.0}